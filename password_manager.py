from cryptography.hazmat.backends import default_backendfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMACfrom cryptography.hazmat.primitives import hashesfrom cryptography.fernet import Fernetimport base64import osKEY_FILE = "key.key"PASSWORD_FILE = "password.txt"# Function to generate and save a new keydef write_key():    key = Fernet.generate_key()    with open(KEY_FILE, "wb") as key_file:        key_file.write(key)# Function to load the encryption keydef load_key():    try:        with open(KEY_FILE, "rb") as key_file:            key = key_file.read()        return key    except FileNotFoundError:        print("Encryption key file 'key.key' not found.")        print("Generating a new key...")        write_key()        with open(KEY_FILE, "rb") as key_file:            key = key_file.read()        return key# Function to derive a Fernet key from the master passworddef derive_key(master_pwd, salt):    kdf = PBKDF2HMAC(        algorithm=hashes.SHA256(),        length=32,        salt=salt,        iterations=100000,        backend=default_backend()    )    return base64.urlsafe_b64encode(kdf.derive(master_pwd.encode()))# Function to initialize Fernet instance with master passworddef initialize_fernet(master_pwd):    key = load_key()    salt = key[:16]  # Use the first 16 bytes of the key as salt    derived_key = derive_key(master_pwd, salt)    return Fernet(derived_key)# Function to view decrypted passwordsdef view(fer):    try:        with open(PASSWORD_FILE, 'r') as f:            for line in f.readlines():                data = line.rstrip()                user, passw = data.split(" | ")                decrypted_pwd = fer.decrypt(passw.encode()).decode()                print(f"Account: {user}, Password: {decrypted_pwd}")    except FileNotFoundError:        print("No passwords stored yet.")# Function to add encrypted passwordsdef add(fer):    name = input("Account Name: ")    pwd = input("Password: ")    encrypted_pwd = fer.encrypt(pwd.encode()).decode()    with open(PASSWORD_FILE, 'a') as f:        f.write(name + " | " + encrypted_pwd + "\n")# Main loop to interact with userdef main():    master_pwd = input("What is the master password? ")    fer = initialize_fernet(master_pwd)    while True:        mode = input("Would you like to add a new password or view existing ones (view, add), press q to quit? ").lower()        if mode == "q":            break        if mode == "view":            view(fer)        elif mode == "add":            add(fer)        else:            print("Invalid mode.")if __name__ == "__main__":    main()